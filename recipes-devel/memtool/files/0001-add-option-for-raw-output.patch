From e30d1d817f0c133baeb2d5ba2fdc4d8f8fe65bd7 Mon Sep 17 00:00:00 2001
From: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
Date: Thu, 28 Apr 2022 13:49:40 +0200
Subject: [PATCH] add option for raw output

For later analysis or to copy data like keys from OTP, it is useful to
output the read data directly as binary.

Patch adds '-r' option to enable this behavior.

Upstream-Status: Submitted [https://github.com/pengutronix/memtool/pull/6]

Signed-off-by: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
---
 memtool.c | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/memtool.c b/memtool.c
index 95fcb6b..572ceb3 100644
--- a/memtool.c
+++ b/memtool.c
@@ -22,6 +22,7 @@
 #include <getopt.h>
 #include <unistd.h>
 #include <errno.h>
+#include <stdbool.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <ctype.h>
@@ -203,7 +204,7 @@ static void usage_md(void)
 	printf(
 "md - memory display\n"
 "\n"
-"Usage: md [-bwlqsx] REGION\n"
+"Usage: md [-bwlqsxr] REGION\n"
 "\n"
 "Display (hex dump) a memory region.\n"
 "\n"
@@ -212,6 +213,7 @@ static void usage_md(void)
 "  -w        word access (16 bit)\n"
 "  -l        long access (32 bit)\n"
 "  -q        quad access (64 bit)\n"
+"  -r        raw (binary) output\n"
 "  -s <FILE> display file (default /dev/mem)\n"
 "  -x        swap bytes at output\n"
 "\n"
@@ -233,8 +235,9 @@ static int cmd_memory_display(int argc, char **argv)
 	off_t start = 0x0;
 	char *file = "/dev/mem";
 	int swap = 0;
+	bool is_raw = false;
 
-	while ((opt = getopt(argc, argv, "bwlqs:xh")) != -1) {
+	while ((opt = getopt(argc, argv, "bwlqrs:xh")) != -1) {
 		switch (opt) {
 		case 'b':
 			width = 1;
@@ -248,6 +251,9 @@ static int cmd_memory_display(int argc, char **argv)
 		case 'q':
 			width = 8;
 			break;
+		case 'r':
+			is_raw = true;
+			break;
 		case 's':
 			file = optarg;
 			break;
@@ -303,7 +309,11 @@ static int cmd_memory_display(int argc, char **argv)
 			return EXIT_FAILURE;
 
 		assert(ret == bufsize);
-		memory_display(buf, start, bufsize, width, swap);
+
+                if (is_raw)
+			fwrite(buf, bufsize, 1, stdout);
+		else
+			memory_display(buf, start, bufsize, width, swap);
 
 		start += bufsize;
 		size -= bufsize;
-- 
2.35.1

